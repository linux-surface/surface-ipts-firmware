name: Release

on:
  push:
    tags:
      - '**'

jobs:
  build-arch:
    name: Build Arch Linux Package
    runs-on: ubuntu-latest
    container: archlinux
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: pacman -Sy --noconfirm sudo binutils fakeroot base-devel

    - name: Build package
      run: |
        cd pkg/arch

        # Fix permissions (can't makepkg as root)
        echo "nobody ALL=(ALL) NOPASSWD: /usr/bin/pacman" >> /etc/sudoers
        chown -R nobody .

        # Package compression settings (Matches latest Arch)
        export PKGEXT='.pkg.tar.zst'
        export COMPRESSZST=(zstd -c -T0 --ultra -20 -)

        # Build
        su nobody --pty -p -s /bin/bash -c 'makepkg -f --noconfirm'

    - name: Sign package
      env:
        GPG_KEY_ID: 56C464BAAC421453
        GPG_KEY: ${{ secrets.SURFACE_GPG_KEY }}
      run: |
        cd pkg/arch

        # import GPG key
        echo "$GPG_KEY" | base64 -d | gpg --import --no-tty --batch --yes
        export GPG_TTY=$(tty)

        # sign package
        ls *.pkg.tar.zst | xargs -L1 gpg --detach-sign --batch --no-tty -u $GPG_KEY_ID

    - name: Prepare release
      run: |
        mkdir release
        mv ./pkg/arch/*.pkg.tar.zst{,.sig} release

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: arch-latest
        path: release

  build-deb:
    name: Build Debian Package
    runs-on: ubuntu-latest
    container: debian:sid
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sed 's/^deb /deb-src /' /etc/apt/sources.list >> /etc/apt/sources.list
        apt-get -y update
        apt-get -y install build-essential fakeroot debhelper dpkg-sig

    - name: Build package
      run: ./pkg/debian/makedeb

    - name: Sign package
      env:
        GPG_KEY_ID: 56C464BAAC421453
        GPG_KEY: ${{ secrets.SURFACE_GPG_KEY }}
      run: |
        cd pkg/debian

        # import GPG key
        echo "$GPG_KEY" | base64 -d | gpg --import --no-tty --batch --yes
        export GPG_TTY=$(tty)

        # sign package
        dpkg-sig -g "--batch --no-tty" --sign builder -k $GPG_KEY_ID ./*.deb

    - name: Prepare release
      run: |
        mkdir release
        mv ./pkg/debian/*.deb release

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: debian-latest
        path: release

  release:
    name: Publish release
    needs: [build-deb, build-arch]
    runs-on: ubuntu-latest
    steps:
    - name: Download Debian artifacts
      uses: actions/download-artifact@v1
      with:
        name: debian-latest

    - name: Download Arch Linux artifacts
      uses: actions/download-artifact@v1
      with:
        name: arch-latest

    - name: Upload assets
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./*-latest/*
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

  repo-deb:
    name: Update Debian package repository
    needs: [release]
    runs-on: ubuntu-latest
    container: debian:sid
    steps:
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y git

    - name: Download artifacts
      uses: actions/download-artifact@v1
      with:
        name: debian-latest

    - name: Update repository
      env:
        SURFACEBOT_TOKEN: ${{ secrets.GITHUB_BOT_TOKEN }}
        BRANCH_STAGING: u/staging
        GIT_REF: ${{ github.ref }}
      run: |
        repo="https://surfacebot:${SURFACEBOT_TOKEN}@github.com/linux-surface/repo.git"

        # clone package repository
        git clone -b "${BRANCH_STAGING}" "${repo}" repo

        # copy packages
        cp debian-latest/* repo/debian/
        cd repo/debian

        # parse git tag from ref
        GIT_TAG=$(echo $GIT_REF | sed 's|^refs/tags/||g')

        # convert packages into references
        for pkg in $(find . -name '*.deb'); do
          echo "surface-ipts-firmware:$GIT_TAG/$(basename $pkg)" > $pkg.blob
          rm $pkg
        done

        # set git identity
        git config --global user.email "surfacebot@users.noreply.github.com"
        git config --global user.name "surfacebot"

        # commit and push
        update_branch="${BRANCH_STAGING}-$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
        git switch -c "${update_branch}"
        git add .
        git commit -m "Update Debian IPTS firmware"
        git push --set-upstream origin "${update_branch}"

  repo-arch:
    name: Update Arch Linux package repository
    needs: [release]
    runs-on: ubuntu-latest
    container: archlinux
    steps:
    - name: Install dependencies
      run: pacman -Sy --noconfirm git

    - name: Download artifacts
      uses: actions/download-artifact@v1
      with:
        name: arch-latest

    - name: Update repository
      env:
        SURFACEBOT_TOKEN: ${{ secrets.GITHUB_BOT_TOKEN }}
        BRANCH_STAGING: u/staging
        GIT_REF: ${{ github.ref }}
      run: |
        repo="https://surfacebot:${SURFACEBOT_TOKEN}@github.com/linux-surface/repo.git"

        # clone package repository
        git clone -b "${BRANCH_STAGING}" "${repo}" repo

        # copy packages
        cp arch-latest/* repo/arch/
        cd repo/arch

        # parse git tag from ref
        GIT_TAG=$(echo $GIT_REF | sed 's|^refs/tags/||g')

        # convert packages into references
        for pkg in $(find . -name '*.pkg.tar.zst'); do
          echo "surface-ipts-firmware:$GIT_TAG/$(basename $pkg)" > $pkg.blob
          rm $pkg
        done

        # set git identity
        git config --global user.email "surfacebot@users.noreply.github.com"
        git config --global user.name "surfacebot"

        # commit and push
        update_branch="${BRANCH_STAGING}-$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
        git switch -c "${update_branch}"
        git add .
        git commit -m "Update Arch Linux IPTS firmware"
        git push --set-upstream origin "${update_branch}"
